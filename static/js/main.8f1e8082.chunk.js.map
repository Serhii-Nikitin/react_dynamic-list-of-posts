{"version":3,"sources":["api/api.js","Types.js","components/PostsList/PostsList.jsx","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","components/Header/Header.jsx","components/Loader/Loader.jsx","App.jsx","index.js"],"names":["request","PropTypes","number","isRequired","string","url","options","fetch","then","response","json","result","data","PostsList","userPosts","setSelectedPostId","selectedPostId","setIsPostSelected","isPostSelected","setSelectedPost","handleButton","postId","getPostDetails","selectedPost","className","length","map","post","key","id","userId","title","type","onClick","NewCommentForm","setNewComment","useState","name","setName","email","setEmail","body","setBody","onSubmit","e","preventDefault","method","JSON","stringify","headers","comment","placeholder","required","value","onChange","target","PostDetails","isCommentShown","setIsCommentShown","removedComment","setRemovedComment","newComment","comments","setComments","handleRemove","commentId","removeComment","useEffect","commentsFromServer","current","Header","posts","setUserId","setUserPosts","getUserPosts","Loader","App","setPosts","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f1e8082.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n","import PropTypes from 'prop-types';\n\nexport const PostType = {\n  userId: PropTypes.number,\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PostType } from '../../Types';\nimport { getPostDetails } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userPosts,\n  setSelectedPostId,\n  selectedPostId,\n  setIsPostSelected,\n  isPostSelected,\n  setSelectedPost,\n}) => {\n  const handleButton = (postId) => {\n    if (postId !== selectedPostId) {\n      setIsPostSelected(true);\n      setSelectedPostId(postId);\n      getPostDetails(postId)\n        .then(selectedPost => setSelectedPost(selectedPost));\n    } else {\n      setIsPostSelected(false);\n      setSelectedPostId(0);\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>\n        Posts:\n        {userPosts.length}\n      </h2>\n\n      <ul className=\"PostsList__list\">\n        {userPosts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User ${post.userId || 'not defined'}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleButton(post.id)}\n            >\n              {selectedPostId === post.id && isPostSelected\n                ? 'Close'\n                : 'Open'\n                }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userPosts: PropTypes.arrayOf(\n    PropTypes.shape(PostType),\n  ).isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setIsPostSelected: PropTypes.func.isRequired,\n  isPostSelected: PropTypes.bool.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getPosts = () => request(`/posts`);\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ selectedPostId, setNewComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addComment('/comments', {\n      method: 'POST',\n      body: JSON.stringify({\n        postId: selectedPostId,\n        name,\n        email,\n        body,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then(comment => setNewComment(comment));\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={e => setBody(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  setNewComment: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nexport const removeComment = (commentId, options) => (\n  request(`/comments/${commentId}`, options)\n);\n\nexport const addComment = (url, options) => request(url, options);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PostType } from '../../Types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId, selectedPost }) => {\n  const [isCommentShown, setIsCommentShown] = useState(true);\n  const [removedComment, setRemovedComment] = useState(null);\n  const [newComment, setNewComment] = useState(null);\n  const [comments, setComments] = useState([]);\n\n  const handleRemove = (commentId) => {\n    removeComment(commentId, { method: 'DELETE' })\n      .then(comment => setRemovedComment(comment));\n  };\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  }, [selectedPostId, removedComment, newComment]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{`Title: ${selectedPost.title || 'This post hasn\\'t title'}`}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsCommentShown(current => !current)}\n        >\n          {`${isCommentShown ? 'Hide ' : 'Show '}${comments.length} comments`}\n        </button>\n\n        {isCommentShown && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleRemove(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            setNewComment={setNewComment}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  selectedPost: PropTypes.shape(PostType).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PostType } from '../../Types';\nimport { getUserPosts } from '../../api/posts';\n\nexport const Header = ({\n  posts,\n  userId,\n  setUserId,\n  setUserPosts,\n  setIsPostSelected,\n  setSelectedPost,\n  setSelectedPostId,\n}) => {\n  const handleSelect = (e) => {\n    if (e.target.value === '0') {\n      setUserId(0);\n      setUserPosts(posts);\n      setIsPostSelected(false);\n    } else {\n      setUserId(+e.target.value);\n      setIsPostSelected(false);\n      getUserPosts(e.target.value)\n        .then(userPosts => setUserPosts(userPosts));\n    }\n\n    setSelectedPost(null);\n    setSelectedPostId(0);\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label>\n        Select a user: &nbsp;\n\n        <select\n          className=\"App__user-selector\"\n          value={userId}\n          onChange={handleSelect}\n        >\n          <option value=\"0\">All users</option>\n          <option value=\"1\">Leanne Graham</option>\n          <option value=\"2\">Ervin Howell</option>\n          <option value=\"3\">Clementine Bauch</option>\n          <option value=\"4\">Patricia Lebsack</option>\n          <option value=\"5\">Chelsey Dietrich</option>\n          <option value=\"6\">Mrs. Dennis Schulist</option>\n          <option value=\"7\">Kurtis Weissnat</option>\n          <option value=\"8\">Nicholas Runolfsdottir V</option>\n          <option value=\"9\">Glenna Reichert</option>\n          <option value=\"10\">Leanne Graham</option>\n        </select>\n      </label>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape(PostType),\n  ).isRequired,\n  userId: PropTypes.number.isRequired,\n  setUserId: PropTypes.func.isRequired,\n  setUserPosts: PropTypes.func.isRequired,\n  setIsPostSelected: PropTypes.func.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts } from './api/posts';\nimport { Header } from './components/Header';\nimport { Loader } from './components/Loader/Loader';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userPosts, setUserPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isPostSelected, setIsPostSelected] = useState(false);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  useEffect(() => {\n    getPosts()\n      .then((postsFromServer) => {\n        setPosts(postsFromServer);\n        setUserPosts(postsFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header\n        posts={posts}\n        userId={userId}\n        setUserId={setUserId}\n        setUserPosts={setUserPosts}\n        setIsPostSelected={setIsPostSelected}\n        setSelectedPost={setSelectedPost}\n        setSelectedPostId={setSelectedPostId}\n      />\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts.length > 0\n            ? (\n              <PostsList\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n                userPosts={userPosts}\n                isPostSelected={isPostSelected}\n                setIsPostSelected={setIsPostSelected}\n                setSelectedPost={setSelectedPost}\n                selectedPost={selectedPost}\n              />\n            ) : <Loader />\n          }\n        </div>\n\n        {selectedPost && isPostSelected && (\n          <div className=\"App__content\">\n            {selectedPostId === 0\n              ? <Loader />\n              : (\n                <PostDetails\n                  selectedPostId={selectedPostId}\n                  selectedPost={selectedPost}\n                />\n              )\n            }\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}